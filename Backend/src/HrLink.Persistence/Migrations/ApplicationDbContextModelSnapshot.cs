// <auto-generated />
using System;
using HrLink.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HrLink.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HrLink.Domain.Entities.Candidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Candidate", (string)null);
                });

            modelBuilder.Entity("HrLink.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfEmployment")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("WorkEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WorkPhoneNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("WorkEmail")
                        .IsUnique();

                    b.HasIndex("WorkPhoneNumber")
                        .IsUnique();

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("HrLink.Domain.Entities.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("InterviewDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("VacancyId");

                    b.ToTable("Interview", (string)null);
                });

            modelBuilder.Entity("HrLink.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("HrLink.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("HrLink.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("HrLink.Domain.Entities.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("MaxSalary")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinSalary")
                        .HasColumnType("numeric");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("StatusId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Vacancy", null, t =>
                        {
                            t.HasCheckConstraint("ValidMaxSalary", "\"MaxSalary\" IS NULL OR \"MaxSalary\" <= 79228162514264337593543950335");

                            t.HasCheckConstraint("ValidMinSalary", "\"MinSalary\" IS NULL OR \"MinSalary\" > 0");
                        });
                });

            modelBuilder.Entity("HrLink.Domain.Entities.VacancyStatus", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("VacancyStatus", (string)null);
                });

            modelBuilder.Entity("HrLink.Domain.Entities.VacancyWorkFormat", b =>
                {
                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.Property<short>("WorkFormatId")
                        .HasColumnType("smallint");

                    b.HasKey("VacancyId", "WorkFormatId");

                    b.HasIndex("WorkFormatId");

                    b.ToTable("VacancyWorkFormat", (string)null);
                });

            modelBuilder.Entity("HrLink.Domain.Entities.WorkFormat", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("WorkFormat", (string)null);
                });

            modelBuilder.Entity("HrLink.Domain.Entities.Interview", b =>
                {
                    b.HasOne("HrLink.Domain.Entities.Candidate", "Candidate")
                        .WithMany("Interviews")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrLink.Domain.Entities.Employee", "Employee")
                        .WithMany("Interviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrLink.Domain.Entities.Vacancy", "Vacancy")
                        .WithMany("Interviews")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Employee");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.User", b =>
                {
                    b.HasOne("HrLink.Domain.Entities.Employee", "Employee")
                        .WithOne("User")
                        .HasForeignKey("HrLink.Domain.Entities.User", "EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("HrLink.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrLink.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.Vacancy", b =>
                {
                    b.HasOne("HrLink.Domain.Entities.VacancyStatus", "Status")
                        .WithMany("Vacancies")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.VacancyWorkFormat", b =>
                {
                    b.HasOne("HrLink.Domain.Entities.Vacancy", "Vacancy")
                        .WithMany("WorkFormats")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrLink.Domain.Entities.WorkFormat", "WorkFormat")
                        .WithMany("WorkFormats")
                        .HasForeignKey("WorkFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vacancy");

                    b.Navigation("WorkFormat");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.Candidate", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Interviews");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.Vacancy", b =>
                {
                    b.Navigation("Interviews");

                    b.Navigation("WorkFormats");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.VacancyStatus", b =>
                {
                    b.Navigation("Vacancies");
                });

            modelBuilder.Entity("HrLink.Domain.Entities.WorkFormat", b =>
                {
                    b.Navigation("WorkFormats");
                });
#pragma warning restore 612, 618
        }
    }
}
